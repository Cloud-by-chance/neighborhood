group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

buildscript{
repositories {
		mavenLocal()
		maven { url 'https://maven.aliyun.com/repository/google/' }
		maven { url 'https://maven.aliyun.com/repository/public/' }
		maven { url 'https://maven.aliyun.com/repository/spring/' }
		maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
		maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	mavenCentral()
}

dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.6")
		classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
}	
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'junit:junit:4.13.1'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java' //실제 배포용
//	runtimeOnly 'com.h2database:h2'// 테스트용
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

//<<<<<<< HEAD
	// JWT와 Spring Security 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	//Spring Security 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// JWT와 Spring Security 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
//=======

	//Spring Security 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	//jwt
//>>>>>>> 4e5c6e3868e5b758f3fb8c5524967f065b31d093
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
//	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
//	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'


//<<<<<<< HEAD
//=======
//
//>>>>>>> 4e5c6e3868e5b758f3fb8c5524967f065b31d093
	//롬복 추가! 2개가 필요
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//Swagger 라이브러리 추가 swagger ? ==> API의 스펙을 명세, 스프링 부트에서는 어노테이션을 해석해 API 문서를 자동 생성
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

//<<<<<<< HEAD
	//JSON Parsing
	dependencies { implementation 'com.google.code.gson:gson:2.8.7' }
	//JSON Parsing
	dependencies { implementation 'com.google.code.gson:gson:2.8.7' }
//=======

	//JSON Parsing
	dependencies { implementation 'com.google.code.gson:gson:2.8.7' }

//>>>>>>> 4e5c6e3868e5b758f3fb8c5524967f065b31d093


}
plugins {
	id 'java'
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"


test {
	useJUnitPlatform()
}
